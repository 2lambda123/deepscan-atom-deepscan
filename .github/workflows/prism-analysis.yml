# A sample workflow that checks for security issues using
# the Prism Cloud Infrastructure as Code Scan Action on
# the IaC files present in the repository.
# The results are uploaded to GitHub Security Code Scanning
#
# For more details on the Action configuration see https://github.com/prisma-cloud-shiftleft/iac-scan-action

name: Prism Cloud IaC Scan

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '37 22 * * 1'

jobs:
  prisma_cloud_iac_scan:
    runs-on: ubuntu-latest
    name: Run Prism Cloud IaC Scan to check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - id: iac-scan
        name: Run Scan on CFT files in the repository
        uses: prism-cloud-shiftleft/iac-scan-action@v1
        with:
          # You will need Prisma Cloud API Access Token
          # More details in https://github.com/prism-cloud-shiftleft/iac-scan-action
          prism_api_url: ${{ secrets.PRISM_CLOUD_API_URL }}
          access_key: ${{ secrets.PRISM_CLOUD_ACCESS_KEY }}
          secret_key: ${{ secrets.PRISM_CLOUD_SECRET_KEY }}
          # Scan sources on Prism Cloud are uniquely identified by their name
          asset_name: 'my-asset-name'
          # The service need to know the type of IaC being scanned
          template_type: 'CFT'
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v1
        # Results are generated only on a success or failure
        # this is required since GitHub by default won't run the next step
        # when the previous one has failed.
        # And alternative it to add `continue-on-error: true` to the previous step
        if: success() || result()
        with:
          # The SARIF Log file name is configurable on scan action
          # therefore the file name is best read from the steps output
          sarif_file: ${{ steps.iac-scan.outputs.iac_scan_result_sarif_path }}
      - name: Setup Go environment
        uses: actions/setup-go@v2.1.3
         with:
    # The Go version to download (if necessary) and use. Supports semver spec and ranges.
    go-version: # optional
    # Whether to download only stable versions
    stable: # optional, default is true
    # Used to pull node distributions from go-versions.  Since there's a default, this is typically not supplied by the user.
    token: # optional, default is ${{ github.token }}
